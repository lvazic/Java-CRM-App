/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import domen.KontaktOsoba;
import domen.Kupac;
import domen.Proizvod;
import java.awt.Dialog;
import java.awt.Frame;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.table.AbstractTableModel;
import logic.Kontroler;
import transfer.KlijentTransferObjekat;
import transfer.ServerTransferObjekat;
import view.model.TableModelKontaktOsobe;
import view.model.TableModelKupci;
import view.model.TableModelProizvodi;

/**
 *
 * @author lvazi_000
 */
public class JPanelAzuriranje extends javax.swing.JPanel {

    AbstractTableModel model;

    public JPanelAzuriranje(AbstractTableModel model, String kriterijumPretrage) {

        initComponents();
        this.model = model;
        this.jLabelDozvoljeniKriterijumi.setText("Dozvoljeni kriterijumi: " + kriterijumPretrage);
        pripremiFormu();

    }

    public AbstractTableModel getModel() {
        return model;
    }

    public void setModel(AbstractTableModel model) {
        this.model = model;
    }

    public JTextField getjTextFieldKriterijumPretrage() {
        return jTextFieldKriterijumPretrage;
    }

    public void setjTextFieldKriterijumPretrage(JTextField jTextFieldKriterijumPretrage) {
        this.jTextFieldKriterijumPretrage = jTextFieldKriterijumPretrage;
    }

    /**
     * Creates new form JPanelAzuriranje
     */
    public JPanelAzuriranje() {
        initComponents();
        pripremiFormu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelKriterijumPretrage = new javax.swing.JLabel();
        jTextFieldKriterijumPretrage = new javax.swing.JTextField();
        jLabelDozvoljeniKriterijumi = new javax.swing.JLabel();
        jButtonPretrazi = new javax.swing.JButton();
        jButtonResetujFilter = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonDetaljiUnosa = new javax.swing.JButton();
        jButtonObrisiUnos = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabelKriterijumPretrage.setText("Kriterijum pretrage: ");

        jLabelDozvoljeniKriterijumi.setText("Dozvoljeni kriterijumi:");

        jButtonPretrazi.setText("Pretraži");
        jButtonPretrazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPretraziActionPerformed(evt);
            }
        });

        jButtonResetujFilter.setText("Poništi filter");
        jButtonResetujFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetujFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelKriterijumPretrage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldKriterijumPretrage, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelDozvoljeniKriterijumi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonPretrazi, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(jButtonResetujFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelKriterijumPretrage)
                    .addComponent(jTextFieldKriterijumPretrage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelDozvoljeniKriterijumi)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonPretrazi)
                        .addComponent(jButtonResetujFilter)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButtonDetaljiUnosa.setText("Detalji unosa");
        jButtonDetaljiUnosa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDetaljiUnosaActionPerformed(evt);
            }
        });

        jButtonObrisiUnos.setText("Obriši unos");
        jButtonObrisiUnos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonObrisiUnosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonObrisiUnos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonDetaljiUnosa, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButtonDetaljiUnosa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonObrisiUnos))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonObrisiUnosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonObrisiUnosActionPerformed

        int i = jTable1.getSelectedRow();

        if (i == -1) {
            JOptionPane.showMessageDialog(this, "Niste izabrali red!", "Greska", JOptionPane.ERROR_MESSAGE);
        } else {

            if (model instanceof TableModelKupci) {

                try {
                    Kupac k = ((TableModelKupci) model).getKupci().get(i);
                    Kontroler.getInstance().obrisiKupca(k);
                    JOptionPane.showMessageDialog(this, "Sistem je obrisao kupca", "Obaveštenje", JOptionPane.INFORMATION_MESSAGE);
                    Kontroler.getInstance().getKupci().remove(k);
                    if (Kontroler.getInstance().getFiltriraniKupci() != null) Kontroler.getInstance().getFiltriraniKupci().remove(k);
                    model.fireTableDataChanged();
                } catch (Exception ex) {
                    Logger.getLogger(JPanelAzuriranje.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Sistem ne može da obriše kupca", "Greška", JOptionPane.ERROR_MESSAGE);

                }

            } else if (model instanceof TableModelKontaktOsobe) {

                try {
                    KontaktOsoba ko = ((TableModelKontaktOsobe) model).getOsobe().get(i);

                    Kontroler.getInstance().obrisiOsobu(ko);
                    JOptionPane.showMessageDialog(this, "Sistem je obrisao kontakt osobu", "Obaveštenje", JOptionPane.INFORMATION_MESSAGE);
                    Kontroler.getInstance().getOsobe().remove(ko);
                    if (Kontroler.getInstance().getFiltriraneOsobe() != null) Kontroler.getInstance().getFiltriraneOsobe().remove(ko);
                    model.fireTableDataChanged();
                } catch (Exception ex) {
                    Logger.getLogger(JPanelAzuriranje.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Sistem ne može da obriše kontakt osobu", "Greška", JOptionPane.ERROR_MESSAGE);

                }

            } else if (model instanceof TableModelProizvodi) {

                try {
                    Proizvod pr = Kontroler.getInstance().getProizvodi().get(i);
                    Kontroler.getInstance().obrisiProizvod(pr);
                    JOptionPane.showMessageDialog(this, "Sistem je obrisao proizvod", "Obaveštenje", JOptionPane.INFORMATION_MESSAGE);
                    Kontroler.getInstance().getProizvodi().remove(pr);
                    if (Kontroler.getInstance().getFiltriraniProizvodi() != null) Kontroler.getInstance().getFiltriraniProizvodi().remove(pr);
                    model.fireTableDataChanged();
                } catch (Exception ex) {
                     Logger.getLogger(JPanelAzuriranje.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Sistem ne može da obriše proizvod", "Greška", JOptionPane.ERROR_MESSAGE);

                }

                

            }

        }

    }//GEN-LAST:event_jButtonObrisiUnosActionPerformed

    private void jButtonPretraziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPretraziActionPerformed

        if (model instanceof TableModelKupci) {

            try {
                Kontroler.getInstance().setFiltriraniKupci(Kontroler.getInstance().vratiFiltriraneKupce(jTextFieldKriterijumPretrage.getText()));
            } catch (Exception ex) {
                Logger.getLogger(JPanelAzuriranje.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
            // Kontroler.getInstance().pretraziKupce(jTextFieldKriterijumPretrage.getText());

            if (Kontroler.getInstance().getFiltriraniKupci().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Sistem ne može da nađe kupce po zadatim kriterijumima", "Greška", JOptionPane.ERROR_MESSAGE);
                try {
                    model = new TableModelKupci(Kontroler.getInstance().vratiKupce());
                } catch (Exception ex) {
                    Logger.getLogger(JPanelAzuriranje.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Sistem ne može da učita kupce", "Greška", JOptionPane.ERROR_MESSAGE);

                }

            } else {
                JOptionPane.showMessageDialog(this, "Sistem je pronašao kupce", "Obaveštenje", JOptionPane.INFORMATION_MESSAGE);
                model = new TableModelKupci(Kontroler.getInstance().getFiltriraniKupci());
            }
        } else if (model instanceof TableModelKontaktOsobe) {

            try {
                Kontroler.getInstance().vratiFiltriraneOsobe(jTextFieldKriterijumPretrage.getText());

            } catch (Exception ex) {
                Logger.getLogger(JPanelAzuriranje.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }

            //Kontroler.getInstance().pretraziKontaktOsobe(jTextFieldKriterijumPretrage.getText());
            if (Kontroler.getInstance().getFiltriraneOsobe().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Sistem ne može da nađe kontakt osobe po zadatim kriterijumima", "Greška", JOptionPane.ERROR_MESSAGE);
                try {
                    model = new TableModelKontaktOsobe(Kontroler.getInstance().vratiKontaktOsobe());
                } catch (Exception ex) {
                    Logger.getLogger(JPanelAzuriranje.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {
                JOptionPane.showMessageDialog(this, "Sistem je prikazao kontakt osobe", "Obaveštenje", JOptionPane.INFORMATION_MESSAGE);
                model = new TableModelKontaktOsobe(Kontroler.getInstance().getFiltriraneOsobe());

            }
        } else if (model instanceof TableModelProizvodi) {

            try {
                Kontroler.getInstance().vratiFiltriraneProizvode(jTextFieldKriterijumPretrage.getText());
            } catch (Exception ex) {
                Logger.getLogger(JPanelAzuriranje.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (Kontroler.getInstance().getFiltriraniProizvodi().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Sistem ne može da nađe proizvode po zadatim kriterijumima", "Greška", JOptionPane.ERROR_MESSAGE);
                try {
                    model = new TableModelProizvodi(Kontroler.getInstance().vratiProizvode());
                } catch (Exception ex) {
                    Logger.getLogger(JPanelAzuriranje.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {
                JOptionPane.showMessageDialog(this, "Sistem je pronašao proizvode", "Obaveštenje", JOptionPane.INFORMATION_MESSAGE);
                model = new TableModelProizvodi(Kontroler.getInstance().getFiltriraniProizvodi());

            }
        }
        jTable1.setModel(model);


    }//GEN-LAST:event_jButtonPretraziActionPerformed

    private void jButtonResetujFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetujFilterActionPerformed

        if (model instanceof TableModelKupci) {
            try {
                model = new TableModelKupci(Kontroler.getInstance().vratiKupce());
            } catch (Exception ex) {
                Logger.getLogger(JPanelAzuriranje.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (model instanceof TableModelKontaktOsobe) {
            try {
                model = new TableModelKontaktOsobe(Kontroler.getInstance().vratiKontaktOsobe());
            } catch (Exception ex) {
                Logger.getLogger(JPanelAzuriranje.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (model instanceof TableModelProizvodi) {
            try {
                model = new TableModelProizvodi(Kontroler.getInstance().vratiProizvode());
            } catch (Exception ex) {
                Logger.getLogger(JPanelAzuriranje.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        jTable1.setModel(model);
    }//GEN-LAST:event_jButtonResetujFilterActionPerformed

    private void jButtonDetaljiUnosaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDetaljiUnosaActionPerformed

        int i = jTable1.getSelectedRow();

        if (i == -1) {
            JOptionPane.showMessageDialog(this, "Niste izabrali red!", "Greska", JOptionPane.ERROR_MESSAGE);
        } else {

            if (model instanceof TableModelKupci) {

                try {
                    Kupac k = ((TableModelKupci) model).getKupci().get(i);
                    JPanelUnosKupca panel = new JPanelUnosKupca(k);

                    JDialog dialog = new JDialog((Dialog) this.getTopLevelAncestor(), "Izmena kupca", true);
                    dialog.add(panel);
                    dialog.pack();
                    dialog.setVisible(true);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Sistem ne može da nađe izabranog kupca", "Greška", JOptionPane.ERROR_MESSAGE);

                }

            } else if (model instanceof TableModelKontaktOsobe) {

                KontaktOsoba ko = ((TableModelKontaktOsobe) model).getOsobe().get(i);
                JPanelUnosKontaktOsobe panel = new JPanelUnosKontaktOsobe(ko);
                JDialog dialog = new JDialog((Dialog) this.getTopLevelAncestor(), "Izmena kontakt osobe", true);
                dialog.add(panel);
                dialog.pack();
                dialog.setVisible(true);

            } else if (model instanceof TableModelProizvodi) {

                Proizvod p = ((TableModelProizvodi) model).getLista().get(i);
                JPanelAzuriranjeProizvoda panel = new JPanelAzuriranjeProizvoda(p);
                JDialog dialog = new JDialog((Dialog) this.getTopLevelAncestor(), "Izmena proizvoda", true);
                dialog.add(panel);
                dialog.pack();
                dialog.setVisible(true);

            }

            model.fireTableDataChanged();

        }


    }//GEN-LAST:event_jButtonDetaljiUnosaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDetaljiUnosa;
    private javax.swing.JButton jButtonObrisiUnos;
    private javax.swing.JButton jButtonPretrazi;
    private javax.swing.JButton jButtonResetujFilter;
    private javax.swing.JLabel jLabelDozvoljeniKriterijumi;
    private javax.swing.JLabel jLabelKriterijumPretrage;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldKriterijumPretrage;
    // End of variables declaration//GEN-END:variables

    private void pripremiFormu() {

        jTable1.setModel(model);
    }
}
